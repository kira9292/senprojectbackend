# ===================================================================
# Spring Boot configuration for the "prod" profile.
#
# This configuration overrides the application.yml file.
#
# More information on profiles: https://www.jhipster.tech/profiles/
# More information on configuration properties: https://www.jhipster.tech/common-application-properties/
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================

logging:
  level:
    ROOT: WARN
    tech.jhipster: INFO
    com.senprojectbackend1: INFO

    # Désactiver complètement les logs Eureka en production
    com.netflix.eureka: OFF
    com.netflix.discovery: OFF
    org.springframework.cloud.netflix.eureka: OFF

    # Logs d'API calls - niveau INFO pour avoir les appels importants
    org.springframework.web: WARN
    org.springframework.web.filter.CommonsRequestLoggingFilter: INFO
    org.springframework.security.web: WARN

    # Désactiver tous les logs non critiques en production
    org.springframework.boot.actuate: ERROR
    org.springframework.cloud.config: ERROR
    org.springframework.kafka: WARN
    org.apache.kafka: ERROR
    org.springframework.boot.docker.compose: OFF
    javax.management.remote.rmi: OFF
    org.springframework.aop: OFF
    org.hibernate.SQL: OFF
    org.springframework.r2dbc: ERROR
    liquibase: ERROR
    org.springframework.cloud.sleuth: OFF
    org.springframework.cloud.loadbalancer: ERROR
    org.springframework.boot.web.embedded: ERROR
    org.springframework.web.servlet.DispatcherServlet: WARN

spring:
  devtools:
    restart:
      enabled: false
    livereload:
      enabled: false
  cloud:
    consul:
      host: consul-server
      port: 8500
      discovery:
        prefer-ip-address: true
        health-check-path: ${management.endpoints.web.base-path}/health
        health-check-interval: 15s
        instance-id: ${spring.application.name}-prod:${spring.application.instance-id:${random.value}}
    stream:
      kafka:
        binder:
          brokers: ${SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS:kafka:9092}
      bindings:
        teamInvitationProducer:
          destination: team-invitation
          content-type: application/json
        teamInvitationConsumer:
          destination: team-invitation
          content-type: application/json
          group: senproject-team-invitation
        teamMembershipUpdateProducer:
          destination: team-membership-update
          content-type: application/json
        teamMembershipUpdateConsumer:
          destination: team-membership-update
          content-type: application/json
          group: senproject-membership-update
        notificationProducer:
          destination: notification-created
          content-type: application/json
        notificationConsumer:
          destination: notification-created
          content-type: application/json
          group: senproject-notification
  # Replace by 'prod, faker' to add the faker context and have sample data loaded in production
  liquibase:
    contexts: prod
    url: ${SPRING_LIQUIBASE_URL:jdbc:postgresql://postgresql:5432/SenProjectBackend1}
    username: ${SPRING_LIQUIBASE_USERNAME:SenProjectBackend1}
    password: ${SPRING_LIQUIBASE_PASSWORD:}
  r2dbc:
    url: ${SPRING_R2DBC_URL:r2dbc:postgresql://postgresql:5432/SenProjectBackend1}
    username: ${SPRING_R2DBC_USERNAME:SenProjectBackend1}
    password: ${SPRING_R2DBC_PASSWORD:}
  thymeleaf:
    cache: true

management:
  prometheus:
    metrics:
      export:
        enabled: false
  zipkin: # Use the "zipkin" Maven profile to have the Spring Cloud Zipkin dependencies
    tracing:
      endpoint: http://zipkin:9411/api/v2/spans
  tracing:
    sampling:
      probability: 1.0 # report 100% of traces
  security:
    oauth2:
      client:
        provider:
          oidc:
            issuer-uri: ${SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OIDC_ISSUER_URI:http://130.185.119.253:9080/realms/jhipster}
        registration:
          oidc:
            client-id: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID:web_app}
            client-secret: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET:}
            scope: web-origins ,roles ,openid ,phone ,microprofile-jwt ,offline_access ,jhipster ,address ,profile ,email

# ===================================================================
# To enable TLS in production, generate a certificate using:
# keytool -genkey -alias senprojectbackend1 -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore keystore.p12 -validity 3650
#
# You can also use Let's Encrypt:
# See details in topic "Create a Java Keystore (.JKS) from Let's Encrypt Certificates" on https://maximilian-boehm.com/en-gb/blog
#
# Then, modify the server.ssl properties so your "server" configuration looks like:
#
# server:
#   port: 443
#   ssl:
#     key-store: classpath:config/tls/keystore.p12
#     key-store-password: password
#     key-store-type: PKCS12
#     key-alias: selfsigned
#     # The ciphers suite enforce the security by deactivating some old and deprecated SSL cipher, this list was tested against SSL Labs (https://www.ssllabs.com/ssltest/)
#     ciphers: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 ,TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,TLS_RSA_WITH_CAMELLIA_256_CBC_SHA,TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,TLS_RSA_WITH_CAMELLIA_128_CBC_SHA
# ===================================================================
server:
  port: 8081
  shutdown: graceful # see https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-graceful-shutdown
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,application/javascript,application/json,image/svg+xml
    min-response-size: 1024

# ===================================================================
# JHipster specific properties
#
# Full reference is available at: https://www.jhipster.tech/common-application-properties/
# ===================================================================

jhipster:
  http:
    cache: # Used by the CachingHttpHeadersFilter
      timeToLiveInDays: 1461
  # Configuration supprimée - plus besoin avec Consul
  # registry:
  #   password: admin
  logging:
    use-json-format: false # By default, logs are not in Json format
    logstash: # Forward logs to logstash over a socket, used by LoggingConfiguration
      enabled: true
      host: logstash
      port: 5000
      ring-buffer-size: 512
# ===================================================================
# Application specific properties
# Add your own application properties here, see the ApplicationProperties class
# to have type-safe configuration, like in the JHipsterProperties above
#
# More documentation is available at:
# https://www.jhipster.tech/common-application-properties/
# ===================================================================

# application:
