package com.senprojectbackend1.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EngagementProjectAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEngagementProjectAllPropertiesEquals(EngagementProject expected, EngagementProject actual) {
        assertEngagementProjectAutoGeneratedPropertiesEquals(expected, actual);
        assertEngagementProjectAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEngagementProjectAllUpdatablePropertiesEquals(EngagementProject expected, EngagementProject actual) {
        assertEngagementProjectUpdatableFieldsEquals(expected, actual);
        assertEngagementProjectUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEngagementProjectAutoGeneratedPropertiesEquals(EngagementProject expected, EngagementProject actual) {
        assertThat(actual)
            .as("Verify EngagementProject auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEngagementProjectUpdatableFieldsEquals(EngagementProject expected, EngagementProject actual) {
        assertThat(actual)
            .as("Verify EngagementProject relevant properties")
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEngagementProjectUpdatableRelationshipsEquals(EngagementProject expected, EngagementProject actual) {
        assertThat(actual)
            .as("Verify EngagementProject relationships")
            .satisfies(a -> assertThat(a.getUser()).as("check user").isEqualTo(expected.getUser()))
            .satisfies(a -> assertThat(a.getProject()).as("check project").isEqualTo(expected.getProject()));
    }
}
